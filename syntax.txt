Program
<program> -> #startprogram'\n'<block1>#endprogram'\n'<outsideprog>
<outsideprog> -> <func>'\n'<outsideprog> | epsilon

Separate Function
<func> -> #function <var> ( <param> )'\n' <block1> #end
<param> -> <param1> | epsilon
<param1> -> <id>,<param1>|<id>

<block1> -> <declare>'\n'<block>
<block> -> <function>'\n'<block> | <function>'\n'

Declaration
<declare> -> @int  <var> <init>| @float <var> <init1>
<init> -> epsilon | =<constant>
<init1> -> epsilon | =<constant>.<intlit>

Functions
<function> -> <print> | <read> | <for> | <if> | <assign> | <call> | ?<comment>?

<assign> -> <var> = <expr>
<expr> -> <expr> <oper1> <term> | <term>
<oper1> -> + | -
<term> -> <term> <oper2> <factor> | <factor>
<oper2> -> * | / | %
<factor> -> (<expr>) | <id>

Identifiers
<id> -> <var> | <constant>
<var> -> <var><alphanum> | <letter>
<alphanum> -> <letter> | <digit>
<letter> -> A | B | … | Z | a | b | … | z
<digit> -> 0 | 1 | 2 | … | 9
<constant> -> <sign><intlit>
<sign> -> epsilon | + | -

<print> -> #print "<strexpr>" #end
<strexpr> -> #{<id>} | <comment>

<read> -> #read <var> #end

<comment> -> <var>_<comment> | epsilon

<call> -> #call <var>(<param>) #end

<if> -> #if (<cond>)'\n' <block> <elif> <else> #end
<elif> -> #elif (<cond>) <block> '\n'<elif> | epsilon
<else> -> #else <block> | epsilon

<for> -> #for (<var>=<id>; <cond>; <var><iter>)'\n' <block>#end
<iter> -> ++ | --

<cond> -> <var> <rel> <id>
<rel> -> == | != | > | < | >= | <=

<cond> -> <var> <rel> <id> | <cond> and <var> <rel> <id> | <cond> or <var> <rel> <id>